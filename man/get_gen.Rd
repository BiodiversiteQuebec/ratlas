% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_gen.R
\name{get_gen}
\alias{get_gen}
\title{Generic function to access data from Atlas databases}
\usage{
get_gen(
  endpoint,
  ...,
  .page_limit = 5e+05,
  .schema = "public",
  .cores = 4,
  .page_parameters = DEFAULT_PAGE_PARAMETERS,
  .n_pages = NA
)
}
\arguments{
\item{endpoint}{\code{character}. Name of the atlas data object to be accessed.
Corresponds to the name of a table, view or stored procedure within Atlas
Postgresql database, stored within schema \code{public} ou \code{api}}

\item{...}{\code{character} or \code{numeric} scalar or vector.
Additional parameters to filter the returned objects. Accepts
parameters corresponding to an object attribute or table columns
(ie. \code{id = c(3,4)}) or a specific parameters related to postgrest http
request parameters and syntax(\code{select = ...})}

\item{.page_limit}{\code{integer} Count of objects returned through pagination}

\item{.schema}{\code{character} Schema from the database where is located the data
object is located. Accept either values \code{api} or \code{public} (default)}

\item{.cores}{\code{integer} default \code{4}. Number of cores used to parallelize and
improve rapidity}

\item{.page_parameters}{\code{list} default
\code{list(limit = "limit", offset = "offset")}. Parameters names sent to http
query to be consumed by the endpoint for pagination}

\item{.token}{\code{character} Bearer token providing access to the web api}

\item{..n_pages}{\code{integer} default NULL. Estimated if none provided}
}
\value{
\code{tibble} with rows associated with Atlas data object
}
\description{
Returns Atlas data objects stored within the database.
Queried data objects are obtained through endpoints corresponding to the name
of the database object storing the required data
(ie. taxa, observations, datasets, etc).
}
\details{
This function is designed to interface with a web API deployed with PostgREST
}
\examples{
# Returns all available taxa records in atlas
taxa <- get_gen("taxa")

# Returns all taxa filtered by the column id values
taxa <- get_gen("taxa", id = c(188, 201, 294, 392))

# Returns first 100 sampling_points from schema `api`
sampling_points <- get_gen(
  "bird_sampling_points",
  .schema = "api",
  limit = 100
)

# Returns first 100 observations with selected columns and joined columns
get_gen("observations",
  limit = 100,
  select = "geom,year_obs,month_obs,day_obs,obs_value,taxa(scientific_name)"
)
}
